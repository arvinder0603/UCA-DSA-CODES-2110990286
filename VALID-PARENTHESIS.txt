O(n2) solution 
//creating all substrings and checking if its valid substring or not


#include <stdio.h>

int main() {
    char s[100];

    printf("Enter a string: ");
    fgets(s, sizeof(s), stdin);

    int ans = 0;

    for (int i = 0; s[i] != '\0'; ++i) {
        int left = 0;
        int right = 0;

        for (int j = i; s[j] != '\0'; j++) {
            if (s[j] == '(') {
                left++;
            } else if (s[j] == ')') {
                right++;
            }

            if (left == right) {
                int a = j - i ;
                if (a > ans) {
                    ans = a;
                }
            } else if (right > left) {
                // If at any point, right parentheses exceed left parentheses, break the inner loop
                break;
            }
        }
    }

    printf("Length of the longest valid parentheses substring: %d\n", ans);

    return 0;
}




//created a stack using struct
//implemented stack using struct and use it for longest valid paranthesis.

#include <stdio.h>

struct Stack {
    int array[1000];
    int top;
};

void initialise(struct Stack *stack) {
    stack->top = -1;
}

int isEmpty(struct Stack *stack) {
    return (stack->top == -1);
}

int isFull(struct Stack *stack) {
    return stack->top == 999;
}

void push(struct Stack *stack, int val) {
    if (isFull(stack)) {
        printf("Stack overflow \n");
    } else {
        stack->top++;
        stack->array[stack->top] = val;
    }
}

int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack empty \n");
        return -1; // Return a special value to indicate underflow
    } else {
        int popValue = stack->array[stack->top];
        stack->top--;
        return popValue;
    }
}

int main() {
    struct Stack st;
    initialise(&st);
    int ans = 0;

    char s[] = "()(()"; // Your input string

    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == '(') {
            push(&st, i);
        } else {
            if (!isEmpty(&st)) {
                pop(&st);

                if (!isEmpty(&st)) {
                    int a = i - st.array[st.top];
                    if (a > ans) {
                        ans = a;
                    }
                } else {
                    push(&st, i);
                }
            }
        }
    }

    printf("Length of the longest valid parentheses substring: %d\n", ans);

    return 0;
}
}
